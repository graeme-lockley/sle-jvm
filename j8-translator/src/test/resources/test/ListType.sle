type Maybe a =
    Nothing
  | Just a


type List a =
    Nil
  | Cons a (List a)


singleton x =
    Cons x Nil

double x y =
    Cons x (singleton y)


singleIntList =
    singleton 10


doubleIntList =
    double 1 2


doubleBooleanList =
    double True False


head Nil = Nothing
head (Cons x xs) = Just x


tail Nil = Nothing
tail (Cons x xs) = Just xs


map : (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)