-- A cons list declaration with operations
type List a =
    Nil
  | Cons a (List a)

singleton x =
    Cons x Nil

duplicate x =
    Cons x (Cons x Nil)
-- ast
Module:
  declarations: [
      TypeDeclaration:
        arguments: [
            ID:
              name: a
          ]
        constructors: [
            Constructor:
              arguments: []
              name:
                ID:
                  name: Nil
            Constructor:
              arguments: [
                  TVarReference:
                    name: a
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: a
                      ]
                    name:
                      QualifiedID:
                        name: List
                        qualifier: null
                ]
              name:
                ID:
                  name: Cons
          ]
        name:
          ID:
            name: List
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: x
              expression:
                CallExpression:
                  operand:
                    ConstructorReference:
                      name:
                        QualifiedID:
                          name: Nil
                          qualifier: null
                  operator:
                    CallExpression:
                      operand:
                        IdReference:
                          name:
                            QualifiedID:
                              name: x
                              qualifier: null
                      operator:
                        ConstructorReference:
                          name:
                            QualifiedID:
                              name: Cons
                              qualifier: null
          ]
        name:
          ID:
            name: singleton
        ttype: null
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: x
              expression:
                CallExpression:
                  operand:
                    CallExpression:
                      operand:
                        ConstructorReference:
                          name:
                            QualifiedID:
                              name: Nil
                              qualifier: null
                      operator:
                        CallExpression:
                          operand:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: x
                                  qualifier: null
                          operator:
                            ConstructorReference:
                              name:
                                QualifiedID:
                                  name: Cons
                                  qualifier: null
                  operator:
                    CallExpression:
                      operand:
                        IdReference:
                          name:
                            QualifiedID:
                              name: x
                              qualifier: null
                      operator:
                        ConstructorReference:
                          name:
                            QualifiedID:
                              name: Cons
                              qualifier: null
          ]
        name:
          ID:
            name: duplicate
        ttype: null
    ]
  exports: []
  imports: []