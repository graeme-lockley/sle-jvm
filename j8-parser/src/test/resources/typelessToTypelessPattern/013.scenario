-- A cons list declaration with operations
type List a =
    Nil
  | Cons a (List a)

singleton x =
    Cons x Nil

duplicate x =
    Cons x (Cons x Nil)
-- ast
Module:
  declarations: [
      TypeDeclaration:
        constructors: [
            Constructor:
              arguments: []
              name:
                ID:
                  name: Nil
            Constructor:
              arguments: [
                  TVar:
                    variable: 0
                  TCon:
                    arguments: [
                        TVar:
                          variable: 0
                      ]
                    name: List
                ]
              name:
                ID:
                  name: Cons
          ]
        name:
          ID:
            name: List
        scheme:
          Scheme:
            parameters: [
                0
              ]
            type:
              TCon:
                arguments: [
                    TVar:
                      variable: 0
                  ]
                name: List
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: x
              expression:
                CallExpression:
                  operand:
                    ConstructorReference:
                      name:
                        QualifiedID:
                          name: Nil
                          qualifier: null
                  operator:
                    CallExpression:
                      operand:
                        IdReference:
                          name:
                            QualifiedID:
                              name: x
                              qualifier: null
                      operator:
                        ConstructorReference:
                          name:
                            QualifiedID:
                              name: Cons
                              qualifier: null
          ]
        name:
          ID:
            name: singleton
        scheme: null
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: x
              expression:
                CallExpression:
                  operand:
                    CallExpression:
                      operand:
                        ConstructorReference:
                          name:
                            QualifiedID:
                              name: Nil
                              qualifier: null
                      operator:
                        CallExpression:
                          operand:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: x
                                  qualifier: null
                          operator:
                            ConstructorReference:
                              name:
                                QualifiedID:
                                  name: Cons
                                  qualifier: null
                  operator:
                    CallExpression:
                      operand:
                        IdReference:
                          name:
                            QualifiedID:
                              name: x
                              qualifier: null
                      operator:
                        ConstructorReference:
                          name:
                            QualifiedID:
                              name: Cons
                              qualifier: null
          ]
        name:
          ID:
            name: duplicate
        scheme: null
    ]
  exports: []
  imports: []