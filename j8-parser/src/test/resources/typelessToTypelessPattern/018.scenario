-- A collection of list extension functions with import and export
export find

import github:Data.List:1.2.1 as LL
import github:Data.Maybe exposing Maybe(..)


find : (a -> Bool) -> LL.List a -> Maybe a
find p LL.Nil = Nothing
find p (LL.Cons x xs) =
    if p x then
        Just x
    else
        find p xs
-- ast
Module:
  declarations: [
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: p
              expression:
                LambdaExpression:
                  argument:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Nil
                          qualifier: LL
                      parameters: []
                  expression:
                    ConstructorReference:
                      name:
                        QualifiedID:
                          name: Nothing
                          qualifier: null
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: p
              expression:
                LambdaExpression:
                  argument:
                    ConstantNTuplePattern:
                      patterns: [
                          ConstructorReferencePattern:
                            name:
                              QualifiedID:
                                name: Cons
                                qualifier: LL
                            parameters: [
                                IdReferencePattern:
                                  name: x
                                IdReferencePattern:
                                  name: xs
                              ]
                        ]
                  expression:
                    IfExpression:
                      elseExpression:
                        CallExpression:
                          operand:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: xs
                                  qualifier: null
                          operator:
                            CallExpression:
                              operand:
                                IdReference:
                                  name:
                                    QualifiedID:
                                      name: p
                                      qualifier: null
                              operator:
                                IdReference:
                                  name:
                                    QualifiedID:
                                      name: find
                                      qualifier: null
                      guardExpression:
                        CallExpression:
                          operand:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: x
                                  qualifier: null
                          operator:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: p
                                  qualifier: null
                      thenExpression:
                        CallExpression:
                          operand:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: x
                                  qualifier: null
                          operator:
                            ConstructorReference:
                              name:
                                QualifiedID:
                                  name: Just
                                  qualifier: null
          ]
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: find
        ttype:
          TArrow:
            domain:
              TArrow:
                domain:
                  TVarReference:
                    name: a
                range:
                  TTypeReference:
                    arguments: []
                    name:
                      QualifiedID:
                        name: Bool
                        qualifier: null
            range:
              TArrow:
                domain:
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: a
                      ]
                    name:
                      QualifiedID:
                        name: List
                        qualifier: LL
                range:
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: a
                      ]
                    name:
                      QualifiedID:
                        name: Maybe
                        qualifier: null
    ]
  exports: [
      LetExport:
        name:
          ID:
            name: find
    ]
  imports: [
      Import:
        asName:
          ID:
            name: LL
        importDeclarations: []
        urn:
          URN:
            name: Data.List
            source: Github
            version: 1.2.1
      Import:
        asName: null
        importDeclarations: [
            TypeImportDeclaration:
              name:
                ID:
                  name: Maybe
              withConstructors: true
          ]
        urn:
          URN:
            name: Data.Maybe
            source: Github
            version: null
    ]