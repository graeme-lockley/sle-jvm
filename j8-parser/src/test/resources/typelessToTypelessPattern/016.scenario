-- A map declaration defined as equations
map : (a -> b) -> List a -> List b

map f Nil =
    Nil

map f (Cons x xs) =
    Cons (f x) (map f xs)
-- ast
Module:
  declarations: [
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: f
              expression:
                LambdaExpression:
                  argument:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Nil
                          qualifier: null
                      parameters: []
                  expression:
                    ConstructorReference:
                      name:
                        QualifiedID:
                          name: Nil
                          qualifier: null
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: f
              expression:
                LambdaExpression:
                  argument:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Cons
                          qualifier: null
                      parameters: [
                          IdReferencePattern:
                            name: x
                          IdReferencePattern:
                            name: xs
                        ]
                  expression:
                    CallExpression:
                      operand:
                        CallExpression:
                          operand:
                            IdReference:
                              name:
                                QualifiedID:
                                  name: xs
                                  qualifier: null
                          operator:
                            CallExpression:
                              operand:
                                IdReference:
                                  name:
                                    QualifiedID:
                                      name: f
                                      qualifier: null
                              operator:
                                IdReference:
                                  name:
                                    QualifiedID:
                                      name: map
                                      qualifier: null
                      operator:
                        CallExpression:
                          operand:
                            CallExpression:
                              operand:
                                IdReference:
                                  name:
                                    QualifiedID:
                                      name: x
                                      qualifier: null
                              operator:
                                IdReference:
                                  name:
                                    QualifiedID:
                                      name: f
                                      qualifier: null
                          operator:
                            ConstructorReference:
                              name:
                                QualifiedID:
                                  name: Cons
                                  qualifier: null
          ]
        name:
          ID:
            name: map
        scheme:
          Scheme:
            parameters: [
                0
                1
              ]
            type:
              TArr:
                domain:
                  TArr:
                    domain:
                      TVar:
                        variable: 0
                    range:
                      TVar:
                        variable: 1
                range:
                  TArr:
                    domain:
                      TCon:
                        arguments: [
                            TVar:
                              variable: 0
                          ]
                        name: List
                    range:
                      TCon:
                        arguments: [
                            TVar:
                              variable: 1
                          ]
                        name: List
    ]
  exports: []
  imports: []