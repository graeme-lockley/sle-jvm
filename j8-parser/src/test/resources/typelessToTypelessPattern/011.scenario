-- Module with type alias and let declaration
typealias IntMap =
    Int -> Int

add : IntMap
add =
    \a b -> a + b
-- ast
Module:
  declarations: [
      TypeAliasDeclaration:
        name:
          ID:
            name: IntMap
        ttype:
          TArrow:
            domain:
              TTypeReference:
                arguments: []
                name:
                  QualifiedID:
                    name: Int
                    qualifier: null
            range:
              TTypeReference:
                arguments: []
                name:
                  QualifiedID:
                    name: Int
                    qualifier: null
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: a
              expression:
                LambdaExpression:
                  argument:
                    IdReferencePattern:
                      name: b
                  expression:
                    BinaryOpExpression:
                      left:
                        IdReference:
                          name:
                            QualifiedID:
                              name: a
                              qualifier: null
                      operator:
                        ID:
                          name: +
                      right:
                        IdReference:
                          name:
                            QualifiedID:
                              name: b
                              qualifier: null
          ]
        name:
          ID:
            name: add
        ttype:
          TTypeReference:
            arguments: []
            name:
              QualifiedID:
                name: IntMap
                qualifier: null
    ]
  exports: []
  imports: []