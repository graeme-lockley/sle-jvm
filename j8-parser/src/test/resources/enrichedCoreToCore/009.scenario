-- Export of a full ADT, ADT, alias and a value
export List(..), Maybe, find, IntMap


type List a =
    Nil
  | Cons a (List a)


type Maybe a =
    Nothing
  | Just a


typealias IntMap =
    Int -> Int


find : (a -> Bool) -> List a -> Maybe a
find p Nil = Nothing
find p (Cons x xs) =
    if p x then
        Just x
    else
        find p xs
-- coreASTpp
export full List: <0> List '0
  Nil: <0> List '0
  Cons: <0> '0 -> List '0 -> List '0
export adt Maybe: <0> Maybe '0
export value find: <0> ('0 -> Bool) -> List '0 -> Maybe '0
export alias IntMap: <> Int -> Int

type List =
  Nil
| Cons '0 List '0


type Maybe =
  Nothing
| Just '0


typealias IntMap =
  <> Int -> Int

find : <0> ('0 -> Bool) -> List '0 -> Maybe '0
find =
  (LAMBDA $v0 ->
    (LAMBDA $v1 ->
      (CASE $v1
        Nil =>
          Nothing
        Cons $$0 $$1 =>
          (IF
            (CALL
              $v0
              $$0
            )
            (CALL
              Just
              $$0
            )
            (CALL
              (CALL
                find
                $v0
              )
              $$1
            )
          )
      )
    )
  )
