-- Import an use a list
export IntMap, find

import file:./../List


typealias IntMap =
    Int -> Int


find : (a -> Bool) -> List.List a -> List.Maybe a
find p List.Nil = List.Nothing
find p (List.Cons x xs) =
    if p x then
        List.Just x
    else
        find p xs
-- enrichedASTpp
export alias IntMap: <> Data.Int -> Data.Int
export value find: <0> ('0 -> Data.Bool) -> file.samples.List.List '0 -> file.samples.Maybe.Maybe '0

typealias IntMap =
  <> Data.Int -> Data.Int

find : <0> ('0 -> Data.Bool) -> file.samples.List.List '0 -> file.samples.Maybe.Maybe '0
find =
  (LAMBDA $v0 ->
    (LAMBDA $v1 ->
      (BAR
        (CALL
          (CALL
            (LAMBDA p ->
              (LAMBDA file.package.name.File.Nil ->
                file.package.name.File.Nothing
              )
            )
            $v1
          )
          $v0
        )
        (CALL
          (CALL
            (LAMBDA p ->
              (LAMBDA file.package.name.File.Cons '5 file.samples.List.List '5 ->
                (IF
                  (CALL
                    p
                    x
                  )
                  (CALL
                    file.package.name.File.Just
                    x
                  )
                  (CALL
                    (CALL
                      find
                      p
                    )
                    xs
                  )
                )
              )
            )
            $v1
          )
          $v0
        )
        ERROR
      )
    )
  )