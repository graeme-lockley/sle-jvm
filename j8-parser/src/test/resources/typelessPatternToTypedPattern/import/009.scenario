-- Validate that the type checker will deal identities of types
import file:./../../List as L1
import file:./../../List as L2


isEmpty : L2.List a -> Bool
isEmpty L1.Nil = True
isEmpty xs = False


singleton : a -> L1.List a
singleton x =
    L2.Cons x L1.Nil

result =
    isEmpty (singleton "Hello")
-- typeAST
Module:
  declarations: [
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                ConstructorReferencePattern:
                  name: file.package.name.File.Nil
                  parameters: []
                  type:
                    TCon:
                      arguments: [
                          TVar:
                            variable: 2
                        ]
                      name: file.samples.List.List
              expression:
                ConstantBool:
                  type:
                    TCon:
                      arguments: []
                      name: Data.Bool
                  value: true
              type:
                TArr:
                  domain:
                    TCon:
                      arguments: [
                          TVar:
                            variable: 2
                        ]
                      name: file.samples.List.List
                  range:
                    TCon:
                      arguments: []
                      name: Data.Bool
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: xs
                  type:
                    TCon:
                      arguments: [
                          TVar:
                            variable: 2
                        ]
                      name: file.samples.List.List
              expression:
                ConstantBool:
                  type:
                    TCon:
                      arguments: []
                      name: Data.Bool
                  value: false
              type:
                TArr:
                  domain:
                    TCon:
                      arguments: [
                          TVar:
                            variable: 2
                        ]
                      name: file.samples.List.List
                  range:
                    TCon:
                      arguments: []
                      name: Data.Bool
          ]
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: isEmpty
        scheme:
          Scheme:
            parameters: [
                0
              ]
            type:
              TArr:
                domain:
                  TCon:
                    arguments: [
                        TVar:
                          variable: 0
                      ]
                    name: file.samples.List.List
                range:
                  TCon:
                    arguments: []
                    name: Data.Bool
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: x
                  type:
                    TVar:
                      variable: 8
              expression:
                CallExpression:
                  operand:
                    IdReference:
                      name: file.package.name.File.Nil
                      type:
                        TCon:
                          arguments: [
                              TVar:
                                variable: 8
                            ]
                          name: file.samples.List.List
                  operator:
                    CallExpression:
                      operand:
                        IdReference:
                          name: x
                          type:
                            TVar:
                              variable: 8
                      operator:
                        IdReference:
                          name: file.package.name.File.Cons
                          type:
                            TArr:
                              domain:
                                TVar:
                                  variable: 8
                              range:
                                TArr:
                                  domain:
                                    TCon:
                                      arguments: [
                                          TVar:
                                            variable: 8
                                        ]
                                      name: file.samples.List.List
                                  range:
                                    TCon:
                                      arguments: [
                                          TVar:
                                            variable: 8
                                        ]
                                      name: file.samples.List.List
                      type:
                        TArr:
                          domain:
                            TCon:
                              arguments: [
                                  TVar:
                                    variable: 8
                                ]
                              name: file.samples.List.List
                          range:
                            TCon:
                              arguments: [
                                  TVar:
                                    variable: 8
                                ]
                              name: file.samples.List.List
                  type:
                    TCon:
                      arguments: [
                          TVar:
                            variable: 8
                        ]
                      name: file.samples.List.List
              type:
                TArr:
                  domain:
                    TVar:
                      variable: 8
                  range:
                    TCon:
                      arguments: [
                          TVar:
                            variable: 8
                        ]
                      name: file.samples.List.List
          ]
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: singleton
        scheme:
          Scheme:
            parameters: [
                1
              ]
            type:
              TArr:
                domain:
                  TVar:
                    variable: 1
                range:
                  TCon:
                    arguments: [
                        TVar:
                          variable: 1
                      ]
                    name: file.samples.List.List
      LetDeclaration:
        expressions: [
            CallExpression:
              operand:
                CallExpression:
                  operand:
                    ConstantString:
                      type:
                        TCon:
                          arguments: []
                          name: Data.String
                      value: Hello
                  operator:
                    IdReference:
                      name: singleton
                      type:
                        TArr:
                          domain:
                            TCon:
                              arguments: []
                              name: Data.String
                          range:
                            TCon:
                              arguments: [
                                  TCon:
                                    arguments: []
                                    name: Data.String
                                ]
                              name: file.samples.List.List
                  type:
                    TCon:
                      arguments: [
                          TCon:
                            arguments: []
                            name: Data.String
                        ]
                      name: file.samples.List.List
              operator:
                IdReference:
                  name: isEmpty
                  type:
                    TArr:
                      domain:
                        TCon:
                          arguments: [
                              TCon:
                                arguments: []
                                name: Data.String
                            ]
                          name: file.samples.List.List
                      range:
                        TCon:
                          arguments: []
                          name: Data.Bool
              type:
                TCon:
                  arguments: []
                  name: Data.Bool
          ]
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: result
        scheme:
          Scheme:
            parameters: []
            type:
              TCon:
                arguments: []
                name: Data.Bool
    ]
  exports: []