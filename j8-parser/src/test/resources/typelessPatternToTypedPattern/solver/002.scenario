-- A thunk let declaration
calculate : () -> Int
calculate =
    \n -> 100

value =
    calculate ()
-- constraints
[
  Data.Unit -> Data.Int : '0 -> Data.Int
  Data.Unit -> Data.Int : Data.Unit -> '1
]
-- substitution
[
  0=Data.Unit
  1=Data.Int
]
-- typeAST
Module:
  declarations: [
      LetDeclaration:
        expressions: [
            LambdaExpression:
              argument:
                IdReferencePattern:
                  name: n
                  type:
                    TCon:
                      arguments: []
                      name: Data.Unit
              expression:
                ConstantInt:
                  type:
                    TCon:
                      arguments: []
                      name: Data.Int
                  value: 100
              type:
                TArr:
                  domain:
                    TCon:
                      arguments: []
                      name: Data.Unit
                  range:
                    TCon:
                      arguments: []
                      name: Data.Int
          ]
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: calculate
        scheme:
          Scheme:
            parameters: []
            type:
              TArr:
                domain:
                  TCon:
                    arguments: []
                    name: Data.Unit
                range:
                  TCon:
                    arguments: []
                    name: Data.Int
      LetDeclaration:
        expressions: [
            CallExpression:
              operand:
                Unit:
                  type:
                    TCon:
                      arguments: []
                      name: Data.Unit
              operator:
                IdReference:
                  name: calculate
                  type:
                    TArr:
                      domain:
                        TCon:
                          arguments: []
                          name: Data.Unit
                      range:
                        TCon:
                          arguments: []
                          name: Data.Int
              type:
                TCon:
                  arguments: []
                  name: Data.Int
          ]
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: value
        scheme:
          Scheme:
            parameters: []
            type:
              TCon:
                arguments: []
                name: Data.Int
    ]
  exports: []