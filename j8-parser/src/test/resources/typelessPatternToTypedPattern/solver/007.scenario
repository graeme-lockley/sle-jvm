-- Validate that a function invocation correctly unifies against the function signature
type List a =
    Nil
  | Cons a (List a)


f : (a -> a -> b) -> a -> List b -> List b
f g a b =
    case b of
        Cons x xs ->
            Cons (g a a) xs
-- constraints
[
  '2 -> '2 -> '3 : '4
  '2 : '5
  file.package.name.File.List '3 : '6
  file.package.name.File.List '3 : '7
  '8 -> file.package.name.File.List '8 -> file.package.name.File.List '8 : '9 -> '10 -> file.package.name.File.List '8
  '12 -> '11 -> file.package.name.File.List '3 : '13 -> file.package.name.File.List '13 -> file.package.name.File.List '13
  '15 -> '14 -> '12 : '2 -> '2 -> '3
  '15 : '2
  '14 : '2
  '11 : '10
  file.package.name.File.List '3 : file.package.name.File.List '8
  '7 : file.package.name.File.List '3
  file.package.name.File.List '3 -> file.package.name.File.List '3 : '6 -> file.package.name.File.List '3
  '2 -> file.package.name.File.List '3 -> file.package.name.File.List '3 : '5 -> file.package.name.File.List '3 -> file.package.name.File.List '3
  ('2 -> '2 -> '3) -> '2 -> file.package.name.File.List '3 -> file.package.name.File.List '3 : '4 -> '2 -> file.package.name.File.List '3 -> file.package.name.File.List '3
]
