-- Nested pattern
type List a =
    Nil
  | Cons a (List a)

type Tuple a b =
    Tuple a b


map2 : (a -> b -> c) -> List a -> List b -> List c
map2 f a b =
    case Tuple a b of
        Tuple Nil Nil ->
            Nil

        Tuple (Cons x xs) (Cons y ys) ->
            Cons (f x y) (map2 f xs ys)

        any ->
            Nil
-- constraints
[
  '6 -> '7 -> Tuple '6 '7 : '4 -> '8
  '8 : '5 -> '9
  '13 -> '14 -> Tuple '13 '14 : List '11 -> List '12 -> Tuple '13 '14
  '9 : Tuple '13 '14
  '10 : List '15
  '18 -> List '18 -> List '18 : '16 -> '17 -> List '18
  '21 -> List '21 -> List '21 : '19 -> '20 -> List '21
  '22 -> '23 -> Tuple '22 '23 : List '18 -> List '21 -> Tuple '22 '23
  '3 : '16 -> '25
  '25 : '19 -> '26
  '24 -> List '24 -> List '24 : '26 -> '27
  ('28 -> '29 -> '30) -> List '28 -> List '29 -> List '30 : '3 -> '31
  '31 : '17 -> '32
  '32 : '20 -> '33
  '27 : '33 -> '34
  '9 : Tuple '22 '23
  '10 : '34
  '9 : '35
  '10 : List '36
  ('37 -> '38 -> '39) -> List '37 -> List '38 -> List '39 : '3 -> '4 -> '5 -> '10
]
