-- Function declared with a type schema
let sillyConcat: <T: Int | String> T -> T -> T =
    \a b -> a
-- ast
Module:
  declarations: [
  LetDeclaration:
    arguments: []
    expression:
      LambdaExpression:
        arguments: [
          ID:
            name: a
          ID:
            name: b
        ]
        expression:
          IdReference:
            name: a
    name:
      ID:
        name: sillyConcat
    schema:
      TSchema:
        parameters: [
            TypeParameter:
              name:
                ID:
                  name: T
              type:
                TBar:
                  op1:
                    TIdReference:
                      name: Int
                  op2:
                    TIdReference:
                      name: String
        ]
        type:
          TArrow:
            domain:
              TIdReference:
                name: T
            range:
              TArrow:
                domain:
                  TIdReference:
                    name: T
                range:
                  TIdReference:
                    name: T
]