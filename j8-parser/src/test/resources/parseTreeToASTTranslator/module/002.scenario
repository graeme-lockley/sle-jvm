-- Multiple non-recursive declarations without a type signature
let add x y =
    x + y

let sub a b =
    a - b
-- ast
Module:
  Location: [(1, 0) (5, 8)]
  LetDeclaration:
    Location: [(1, 0) (2, 8)]
    Name: add
    Arguments: ID(location=[(1, 8) (1, 8)], name=x), ID(location=[(1, 10) (1, 10)], name=y)
    Expression:
      BinaryOpExpression:
        Left:
          IdReference:
            Location: [(2, 4) (2, 4)]
            Name: x
        Operator: ID(location=[(2, 6) (2, 6)], name=+)
        Right:
          IdReference:
            Location: [(2, 8) (2, 8)]
            Name: y
  LetDeclaration:
    Location: [(4, 0) (5, 8)]
    Name: sub
    Arguments: ID(location=[(4, 8) (4, 8)], name=a), ID(location=[(4, 10) (4, 10)], name=b)
    Expression:
      BinaryOpExpression:
        Left:
          IdReference:
            Location: [(5, 4) (5, 4)]
            Name: a
        Operator: ID(location=[(5, 6) (5, 6)], name=-)
        Right:
          IdReference:
            Location: [(5, 8) (5, 8)]
            Name: b