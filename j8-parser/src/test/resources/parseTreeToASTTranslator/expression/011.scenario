-- Binary operator expressions
barBar =
    \x y -> x || y

ampersandAmpersand =
    \x y -> x && y

equalEqual =
    \x y -> x == y

bangEqual =
    \x y -> x != y

lessEqual =
    \x y -> x <= y

lessThan =
    \x y -> x < y

greaterEqual =
    \x y -> x >= y

greaterThan =
    \x y -> x > y

plus =
    \x y -> x + y

minus =
    \x y -> x - y

star =
    \x y -> x * y

slash =
    \x y -> x / y
-- ast
Module:
  declarations: [
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: ||
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: barBar
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: &&
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: ampersandAmpersand
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: ==
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: equalEqual
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: !=
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: bangEqual
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: <=
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: lessEqual
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: <
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: lessThan
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: >=
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: greaterEqual
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: >
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: greaterThan
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: +
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: plus
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: -
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: minus
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: *
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: star
      schema: null
    LetDeclaration:
      arguments: []
      expression:
        LambdaExpression:
          arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
          expression:
            BinaryOpExpression:
              left:
                IdReference:
                  name: x
              operator:
                ID:
                  name: /
              right:
                IdReference:
                  name: y
      name:
        ID:
          name: slash
      schema: null
  ]