-- Nested pattern with list syntactic sugar
type List a =
    Nil
  | Cons a (List a)

type Tuple a b =
    Tuple a b


map2 : (a -> b -> c) -> List a -> List b -> List c
map2 f a b =
    case Tuple a b of
        Tuple [] [] ->
            []

        Tuple (x :: xs) (y :: ys) ->
            (f x y) :: (map2 xs ys)

        any ->
            []
-- ast
Module:
  declarations: [
      TypeDeclaration:
        arguments: [
            ID:
              name: a
          ]
        constructors: [
            TypeConstructor:
              arguments: []
              name:
                ID:
                  name: Nil
            TypeConstructor:
              arguments: [
                  TVarReference:
                    name: a
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: a
                      ]
                    name:
                      QualifiedID:
                        name: List
                        qualifier: null
                ]
              name:
                ID:
                  name: Cons
          ]
        name:
          ID:
            name: List
      TypeDeclaration:
        arguments: [
            ID:
              name: a
            ID:
              name: b
          ]
        constructors: [
            TypeConstructor:
              arguments: [
                  TVarReference:
                    name: a
                  TVarReference:
                    name: b
                ]
              name:
                ID:
                  name: Tuple
          ]
        name:
          ID:
            name: Tuple
      LetSignature:
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: map2
        type:
          TArrow:
            domain:
              TArrow:
                domain:
                  TVarReference:
                    name: a
                range:
                  TArrow:
                    domain:
                      TVarReference:
                        name: b
                    range:
                      TVarReference:
                        name: c
            range:
              TArrow:
                domain:
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: a
                      ]
                    name:
                      QualifiedID:
                        name: List
                        qualifier: null
                range:
                  TArrow:
                    domain:
                      TTypeReference:
                        arguments: [
                            TVarReference:
                              name: b
                          ]
                        name:
                          QualifiedID:
                            name: List
                            qualifier: null
                    range:
                      TTypeReference:
                        arguments: [
                            TVarReference:
                              name: c
                          ]
                        name:
                          QualifiedID:
                            name: List
                            qualifier: null
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: f
            IdReferencePattern:
              name: a
            IdReferencePattern:
              name: b
          ]
        expression:
          CaseExpression:
            items: [
                CaseItem:
                  expression:
                    ConstantList:
                      expressions: []
                  pattern:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Tuple
                          qualifier: null
                      parameters: [
                          ConstantListPattern:
                            values: []
                          ConstantListPattern:
                            values: []
                        ]
                CaseItem:
                  expression:
                    BinaryOpExpression:
                      left:
                        NestedExpressions:
                          expressions: [
                              CallExpression:
                                operands: [
                                    IdReference:
                                      name:
                                        QualifiedID:
                                          name: x
                                          qualifier: null
                                    IdReference:
                                      name:
                                        QualifiedID:
                                          name: y
                                          qualifier: null
                                  ]
                                operator:
                                  IdReference:
                                    name:
                                      QualifiedID:
                                        name: f
                                        qualifier: null
                            ]
                      operator:
                        ID:
                          name: ::
                      right:
                        NestedExpressions:
                          expressions: [
                              CallExpression:
                                operands: [
                                    IdReference:
                                      name:
                                        QualifiedID:
                                          name: xs
                                          qualifier: null
                                    IdReference:
                                      name:
                                        QualifiedID:
                                          name: ys
                                          qualifier: null
                                  ]
                                operator:
                                  IdReference:
                                    name:
                                      QualifiedID:
                                        name: map2
                                        qualifier: null
                            ]
                  pattern:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Tuple
                          qualifier: null
                      parameters: [
                          ConstantNTuplePattern:
                            patterns: [
                                ConsOperatorPattern:
                                  head:
                                    IdReferencePattern:
                                      name: x
                                  tail:
                                    IdReferencePattern:
                                      name: xs
                              ]
                          ConstantNTuplePattern:
                            patterns: [
                                ConsOperatorPattern:
                                  head:
                                    IdReferencePattern:
                                      name: y
                                  tail:
                                    IdReferencePattern:
                                      name: ys
                              ]
                        ]
                CaseItem:
                  expression:
                    ConstantList:
                      expressions: []
                  pattern:
                    IdReferencePattern:
                      name: any
              ]
            operator:
              CallExpression:
                operands: [
                    IdReference:
                      name:
                        QualifiedID:
                          name: a
                          qualifier: null
                    IdReference:
                      name:
                        QualifiedID:
                          name: b
                          qualifier: null
                  ]
                operator:
                  ConstructorReference:
                    name:
                      QualifiedID:
                        name: Tuple
                        qualifier: null
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: map2
    ]
  exports: []
  imports: []