-- A nested case expression
nested a b =
    case a of
        Nil ->
            case b of
                Nil ->
                    Nil

                Cons bh bt ->
                    bt

        Cons ah at ->
            at
-- ast
Module:
  declarations: [
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: a
            IdReferencePattern:
              name: b
          ]
        expression:
          CaseExpression:
            items: [
                CaseItem:
                  expression:
                    CaseExpression:
                      items: [
                          CaseItem:
                            expression:
                              ConstructorReference:
                                name:
                                  QualifiedID:
                                    name: Nil
                                    qualifier: null
                            pattern:
                              ConstructorReferencePattern:
                                name:
                                  QualifiedID:
                                    name: Nil
                                    qualifier: null
                                parameters: []
                          CaseItem:
                            expression:
                              IdReference:
                                name:
                                  QualifiedID:
                                    name: bt
                                    qualifier: null
                            pattern:
                              ConstructorReferencePattern:
                                name:
                                  QualifiedID:
                                    name: Cons
                                    qualifier: null
                                parameters: [
                                    IdReferencePattern:
                                      name: bh
                                    IdReferencePattern:
                                      name: bt
                                  ]
                        ]
                      operator:
                        IdReference:
                          name:
                            QualifiedID:
                              name: b
                              qualifier: null
                  pattern:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Nil
                          qualifier: null
                      parameters: []
                CaseItem:
                  expression:
                    IdReference:
                      name:
                        QualifiedID:
                          name: at
                          qualifier: null
                  pattern:
                    ConstructorReferencePattern:
                      name:
                        QualifiedID:
                          name: Cons
                          qualifier: null
                      parameters: [
                          IdReferencePattern:
                            name: ah
                          IdReferencePattern:
                            name: at
                        ]
              ]
            operator:
              IdReference:
                name:
                  QualifiedID:
                    name: a
                    qualifier: null
        id:
          ID:
            name: nested
    ]
  exports: []
  imports: []