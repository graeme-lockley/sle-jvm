-- A simple case expression over a product Tuple
type Tuple a b =
    Tuple a b

first : (Tuple a b) -> a
first t =
    case t of
        Tuple a b -> a

second : (Tuple a b) -> b
second t =
    case t of
        Tuple a b -> b

mapFirst : (a -> c) -> (Tuple a b) -> (Tuple c b)
mapFirst f t =
    case t of
        Tuple a b -> Tuple (f a) b

mapSecond : (b -> c) -> (Tuple a b) -> (Tuple a c)
mapSecond f t =
    case t of
        Tuple a b -> Tuple a (f b)
-- ast
Module:
  declarations: [
      TypeDeclaration:
        arguments: [
            ID:
              name: a
            ID:
              name: b
          ]
        constructors: [
            TypeConstructor:
              arguments: [
                  TVarReference:
                    name: a
                  TVarReference:
                    name: b
                ]
              name:
                ID:
                  name: Tuple
          ]
        name:
          ID:
            name: Tuple
      LetSignature:
        name:
          ID:
            name: first
        type:
          TArrow:
            domain:
              TConstReference:
                arguments: [
                    TVarReference:
                      name: a
                    TVarReference:
                      name: b
                  ]
                name:
                  ID:
                    name: Tuple
            range:
              TVarReference:
                name: a
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: t
          ]
        expression:
          CaseExpression:
            items: [
                CaseItem:
                  expression:
                    IdReference:
                      name: a
                  pattern:
                    ConstructorReferencePattern:
                      name: Tuple
                      parameters: [
                          IdReferencePattern:
                            name: a
                          IdReferencePattern:
                            name: b
                        ]
              ]
            operator:
              IdReference:
                name: t
        name:
          ID:
            name: first
      LetSignature:
        name:
          ID:
            name: second
        type:
          TArrow:
            domain:
              TConstReference:
                arguments: [
                    TVarReference:
                      name: a
                    TVarReference:
                      name: b
                  ]
                name:
                  ID:
                    name: Tuple
            range:
              TVarReference:
                name: b
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: t
          ]
        expression:
          CaseExpression:
            items: [
                CaseItem:
                  expression:
                    IdReference:
                      name: b
                  pattern:
                    ConstructorReferencePattern:
                      name: Tuple
                      parameters: [
                          IdReferencePattern:
                            name: a
                          IdReferencePattern:
                            name: b
                        ]
              ]
            operator:
              IdReference:
                name: t
        name:
          ID:
            name: second
      LetSignature:
        name:
          ID:
            name: mapFirst
        type:
          TArrow:
            domain:
              TArrow:
                domain:
                  TVarReference:
                    name: a
                range:
                  TVarReference:
                    name: c
            range:
              TArrow:
                domain:
                  TConstReference:
                    arguments: [
                        TVarReference:
                          name: a
                        TVarReference:
                          name: b
                      ]
                    name:
                      ID:
                        name: Tuple
                range:
                  TConstReference:
                    arguments: [
                        TVarReference:
                          name: c
                        TVarReference:
                          name: b
                      ]
                    name:
                      ID:
                        name: Tuple
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: f
            IdReferencePattern:
              name: t
          ]
        expression:
          CaseExpression:
            items: [
                CaseItem:
                  expression:
                    CallExpression:
                      operands: [
                          CallExpression:
                            operands: [
                                IdReference:
                                  name: a
                              ]
                            operator:
                              IdReference:
                                name: f
                          IdReference:
                            name: b
                        ]
                      operator:
                        ConstructorReference:
                          name: Tuple
                  pattern:
                    ConstructorReferencePattern:
                      name: Tuple
                      parameters: [
                          IdReferencePattern:
                            name: a
                          IdReferencePattern:
                            name: b
                        ]
              ]
            operator:
              IdReference:
                name: t
        name:
          ID:
            name: mapFirst
      LetSignature:
        name:
          ID:
            name: mapSecond
        type:
          TArrow:
            domain:
              TArrow:
                domain:
                  TVarReference:
                    name: b
                range:
                  TVarReference:
                    name: c
            range:
              TArrow:
                domain:
                  TConstReference:
                    arguments: [
                        TVarReference:
                          name: a
                        TVarReference:
                          name: b
                      ]
                    name:
                      ID:
                        name: Tuple
                range:
                  TConstReference:
                    arguments: [
                        TVarReference:
                          name: a
                        TVarReference:
                          name: c
                      ]
                    name:
                      ID:
                        name: Tuple
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: f
            IdReferencePattern:
              name: t
          ]
        expression:
          CaseExpression:
            items: [
                CaseItem:
                  expression:
                    CallExpression:
                      operands: [
                          IdReference:
                            name: a
                          CallExpression:
                            operands: [
                                IdReference:
                                  name: b
                              ]
                            operator:
                              IdReference:
                                name: f
                        ]
                      operator:
                        ConstructorReference:
                          name: Tuple
                  pattern:
                    ConstructorReferencePattern:
                      name: Tuple
                      parameters: [
                          IdReferencePattern:
                            name: a
                          IdReferencePattern:
                            name: b
                        ]
              ]
            operator:
              IdReference:
                name: t
        name:
          ID:
            name: mapSecond
    ]
  exports: []
