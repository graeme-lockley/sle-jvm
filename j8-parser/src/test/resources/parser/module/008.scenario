-- A map declaration defined as equations
map : (a -> b) -> List a -> List b

map f Nil =
    Nil

map f (Cons x xs) =
    Cons (f x) (map f xs)
-- ast
Module:
  declarations: [
      LetSignature:
        name:
          ID:
            name: map
        type:
          TArrow:
            domain:
              TArrow:
                domain:
                  TVarReference:
                    name: a
                range:
                  TVarReference:
                    name: b
            range:
              TArrow:
                domain:
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: a
                      ]
                    name:
                      QualifiedID:
                        name: List
                        qualifier: null
                range:
                  TTypeReference:
                    arguments: [
                        TVarReference:
                          name: b
                      ]
                    name:
                      QualifiedID:
                        name: List
                        qualifier: null
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: f
            ConstructorReferencePattern:
              name:
                QualifiedID:
                  name: Nil
                  qualifier: null
              parameters: []
          ]
        expression:
          ConstructorReference:
            name:
              QualifiedID:
                name: Nil
                qualifier: null
        name:
          ID:
            name: map
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: f
            ConstructorReferencePattern:
              name:
                QualifiedID:
                  name: Cons
                  qualifier: null
              parameters: [
                  IdReferencePattern:
                    name: x
                  IdReferencePattern:
                    name: xs
                ]
          ]
        expression:
          CallExpression:
            operands: [
                CallExpression:
                  operands: [
                      IdReference:
                        name:
                          QualifiedID:
                            name: x
                            qualifier: null
                    ]
                  operator:
                    IdReference:
                      name:
                        QualifiedID:
                          name: f
                          qualifier: null
                CallExpression:
                  operands: [
                      IdReference:
                        name:
                          QualifiedID:
                            name: f
                            qualifier: null
                      IdReference:
                        name:
                          QualifiedID:
                            name: xs
                            qualifier: null
                    ]
                  operator:
                    IdReference:
                      name:
                        QualifiedID:
                          name: map
                          qualifier: null
              ]
            operator:
              ConstructorReference:
                name:
                  QualifiedID:
                    name: Cons
                    qualifier: null
        name:
          ID:
            name: map
    ]
  exports: []
  imports: []