-- Single declaration with a type signature
add : Int -> Int -> Int
add x y =
    x + y
-- ast
Module:
  declarations: [
      LetSignature:
        name:
          ID:
            name: add
        type:
          TArrow:
            domain:
              TConstReference:
                arguments: []
                name:
                  ID:
                    name: Int
            range:
              TArrow:
                domain:
                  TConstReference:
                    arguments: []
                    name:
                      ID:
                        name: Int
                range:
                  TConstReference:
                    arguments: []
                    name:
                      ID:
                        name: Int
      LetDeclaration:
        arguments: [
            ID:
              name: x
            ID:
              name: y
          ]
        expression:
          BinaryOpExpression:
            left:
              IdReference:
                name: x
            operator:
              ID:
                name: +
            right:
              IdReference:
                name: y
        name:
          ID:
            name: add
    ]