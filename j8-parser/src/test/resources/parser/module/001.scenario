-- Single declaration with a type signature
add : Int -> Int -> Int
add x y =
    x + y
-- ast
Module:
  declarations: [
      LetSignature:
        id:
          ID:
            name: add
        type:
          TArrow:
            domain:
              TTypeReference:
                arguments: []
                name:
                  QualifiedID:
                    name: Int
                    qualifier: null
            range:
              TArrow:
                domain:
                  TTypeReference:
                    arguments: []
                    name:
                      QualifiedID:
                        name: Int
                        qualifier: null
                range:
                  TTypeReference:
                    arguments: []
                    name:
                      QualifiedID:
                        name: Int
                        qualifier: null
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: x
            IdReferencePattern:
              name: y
          ]
        expression:
          BinaryOpExpression:
            left:
              IdReference:
                name:
                  QualifiedID:
                    name: x
                    qualifier: null
            operator:
              ID:
                name: +
            right:
              IdReference:
                name:
                  QualifiedID:
                    name: y
                    qualifier: null
        name:
          ID:
            name: add
    ]
  exports: []
  imports: []