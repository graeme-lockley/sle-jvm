-- Type alias and a let declaration
typealias IntToInt =
    Int -> Int

negate : IntToInt
negate a =
    0 - a
-- ast
Module:
  declarations: [
      TypeAliasDeclaration:
        name:
          ID:
            name: IntToInt
        type:
          TArrow:
            domain:
              TConstReference:
                arguments: []
                name:
                  QualifiedID:
                    name: Int
                    qualifier: null
            range:
              TConstReference:
                arguments: []
                name:
                  QualifiedID:
                    name: Int
                    qualifier: null
      LetSignature:
        name:
          ID:
            name: negate
        type:
          TConstReference:
            arguments: []
            name:
              QualifiedID:
                name: IntToInt
                qualifier: null
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: a
          ]
        expression:
          BinaryOpExpression:
            left:
              ConstantInt:
                value: 0
            operator:
              ID:
                name: -
            right:
              IdReference:
                name:
                  QualifiedID:
                    name: a
                    qualifier: null
        name:
          ID:
            name: negate
    ]
  exports: []
  imports: []