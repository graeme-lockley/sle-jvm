-- Multiple exports
export plus, minus, List(..), Maybe, (?:)

type List a =
    Nil
  | Cons a (List a)

type Maybe a =
    Nothing
  | Just a


plus x y =
    x + y

minus x y =
    x - y


(?: 5 right) : Maybe a -> a -> a
(?: 5 right) Nothing d = d
(?: 5 right) (Just x) d = x
-- ast
Module:
  declarations: [
      TypeDeclaration:
        arguments: [
            ID:
              name: a
          ]
        constructors: [
            TypeConstructor:
              arguments: []
              name:
                ID:
                  name: Nil
            TypeConstructor:
              arguments: [
                  TVarReference:
                    name: a
                  TNTuple:
                    types: [
                        TTypeReference:
                          arguments: [
                              TVarReference:
                                name: a
                            ]
                          name:
                            QualifiedID:
                              name: List
                              qualifier: null
                      ]
                ]
              name:
                ID:
                  name: Cons
          ]
        name:
          ID:
            name: List
      TypeDeclaration:
        arguments: [
            ID:
              name: a
          ]
        constructors: [
            TypeConstructor:
              arguments: []
              name:
                ID:
                  name: Nothing
            TypeConstructor:
              arguments: [
                  TVarReference:
                    name: a
                ]
              name:
                ID:
                  name: Just
          ]
        name:
          ID:
            name: Maybe
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: x
            IdReferencePattern:
              name: y
          ]
        expression:
          BinaryOpExpression:
            left:
              IdReference:
                name:
                  QualifiedID:
                    name: x
                    qualifier: null
            operator:
              ID:
                name: +
            right:
              IdReference:
                name:
                  QualifiedID:
                    name: y
                    qualifier: null
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: plus
      LetDeclaration:
        arguments: [
            IdReferencePattern:
              name: x
            IdReferencePattern:
              name: y
          ]
        expression:
          BinaryOpExpression:
            left:
              IdReference:
                name:
                  QualifiedID:
                    name: x
                    qualifier: null
            operator:
              ID:
                name: -
            right:
              IdReference:
                name:
                  QualifiedID:
                    name: y
                    qualifier: null
        id:
          LowerIDDeclarationID:
            name:
              ID:
                name: minus
      LetSignature:
        id:
          OperatorDeclarationID:
            associativity:
              Right:
            name:
              ID:
                name: ?:
            precedence: 5
        type:
          TArrow:
            domain:
              TTypeReference:
                arguments: [
                    TVarReference:
                      name: a
                  ]
                name:
                  QualifiedID:
                    name: Maybe
                    qualifier: null
            range:
              TArrow:
                domain:
                  TVarReference:
                    name: a
                range:
                  TVarReference:
                    name: a
      LetDeclaration:
        arguments: [
            ConstructorReferencePattern:
              name:
                QualifiedID:
                  name: Nothing
                  qualifier: null
              parameters: []
            IdReferencePattern:
              name: d
          ]
        expression:
          IdReference:
            name:
              QualifiedID:
                name: d
                qualifier: null
        id:
          OperatorDeclarationID:
            associativity:
              Right:
            name:
              ID:
                name: ?:
            precedence: 5
      LetDeclaration:
        arguments: [
            ConstantNTuplePattern:
              patterns: [
                  ConstructorReferencePattern:
                    name:
                      QualifiedID:
                        name: Just
                        qualifier: null
                    parameters: [
                        IdReferencePattern:
                          name: x
                      ]
                ]
            IdReferencePattern:
              name: d
          ]
        expression:
          IdReference:
            name:
              QualifiedID:
                name: x
                qualifier: null
        id:
          OperatorDeclarationID:
            associativity:
              Right:
            name:
              ID:
                name: ?:
            precedence: 5
    ]
  exports: [
      LetExport:
        name:
          ID:
            name: plus
      LetExport:
        name:
          ID:
            name: minus
      TypeExport:
        name:
          ID:
            name: List
        withConstructors: true
      TypeExport:
        name:
          ID:
            name: Maybe
        withConstructors: false
      LetExport:
        name:
          ID:
            name: ?:
    ]
  imports: []