-- Binary operator expressions
barBar =
    \x y -> x || y

ampersandAmpersand =
    \x y -> x && y

equalEqual =
    \x y -> x == y

bangEqual =
    \x y -> x != y

lessEqual =
    \x y -> x <= y

lessThan =
    \x y -> x < y

greaterEqual =
    \x y -> x >= y

greaterThan =
    \x y -> x > y

plus =
    \x y -> x + y

minus =
    \x y -> x - y

star =
    \x y -> x * y

slash =
    \x y -> x / y
-- ast
Module:
  declarations: [
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: ||
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: barBar
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: &&
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: ampersandAmpersand
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: ==
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: equalEqual
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: !=
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: bangEqual
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: <=
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: lessEqual
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: <
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: lessThan
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: >=
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: greaterEqual
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: >
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: greaterThan
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: +
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: plus
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: -
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: minus
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: *
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: star
      LetDeclaration:
        arguments: []
        expression:
          LambdaExpression:
            arguments: [
                IdReferencePattern:
                  name: x
                IdReferencePattern:
                  name: y
              ]
            expression:
              BinaryOpExpression:
                left:
                  IdReference:
                    name:
                      QualifiedID:
                        name: x
                        qualifier: null
                operator:
                  ID:
                    name: /
                right:
                  IdReference:
                    name:
                      QualifiedID:
                        name: y
                        qualifier: null
        id:
          ID:
            name: slash
    ]
  exports: []
  imports: []