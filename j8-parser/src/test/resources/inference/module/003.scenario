-- A schema declaration with or types
let mplus: <X: String | Int> X -> X -> X =
    \a b -> a

let add  =
    \a b -> mplus a b
-- constraints
[
  '2 -> '2 -> '2 : '0 -> '1 -> '0
  '2 : String | Int
  '5 : String | Int
  '5 -> '5 -> '5 : '3 -> '6
  '6 : '4 -> '7
]
-- substitution
[
  2=String | Int
  0=String | Int
  1=String | Int
  5=String | Int
  3=String | Int
  6=String | Int -> String | Int
  4=String | Int
  7=String | Int
]
-- ast
Module:
  declarations: [
      LetDeclaration:
        expression:
          LambdaExpression:
            argument:
              ID:
                name: a
            expression:
              LambdaExpression:
                argument:
                  ID:
                    name: b
                expression:
                  IdReference:
                    name: a
                    type:
                      TVar:
                        variable: 0
                type:
                  TArr:
                    domain:
                      TVar:
                        variable: 1
                    range:
                      TVar:
                        variable: 0
            type:
              TArr:
                domain:
                  TVar:
                    variable: 0
                range:
                  TArr:
                    domain:
                      TVar:
                        variable: 1
                    range:
                      TVar:
                        variable: 0
        name:
          ID:
            name: mplus
        schema:
          Schema:
            parameters: [
                Parameter:
                  constraint: null
                  name: 0
                Parameter:
                  constraint: null
                  name: 1
              ]
            type:
              TArr:
                domain:
                  TVar:
                    variable: 0
                range:
                  TArr:
                    domain:
                      TVar:
                        variable: 1
                    range:
                      TVar:
                        variable: 0
      LetDeclaration:
        expression:
          LambdaExpression:
            argument:
              ID:
                name: a
            expression:
              LambdaExpression:
                argument:
                  ID:
                    name: b
                expression:
                  CallExpression:
                    operand:
                      IdReference:
                        name: b
                        type:
                          TVar:
                            variable: 4
                    operator:
                      CallExpression:
                        operand:
                          IdReference:
                            name: a
                            type:
                              TVar:
                                variable: 3
                        operator:
                          IdReference:
                            name: mplus
                            type:
                              TArr:
                                domain:
                                  TVar:
                                    variable: 5
                                range:
                                  TArr:
                                    domain:
                                      TVar:
                                        variable: 5
                                    range:
                                      TVar:
                                        variable: 5
                        type:
                          TVar:
                            variable: 6
                    type:
                      TVar:
                        variable: 7
                type:
                  TArr:
                    domain:
                      TVar:
                        variable: 4
                    range:
                      TVar:
                        variable: 7
            type:
              TArr:
                domain:
                  TVar:
                    variable: 3
                range:
                  TArr:
                    domain:
                      TVar:
                        variable: 4
                    range:
                      TVar:
                        variable: 7
        name:
          ID:
            name: add
        schema:
          Schema:
            parameters: [
                Parameter:
                  constraint: null
                  name: 3
                Parameter:
                  constraint: null
                  name: 4
                Parameter:
                  constraint: null
                  name: 7
              ]
            type:
              TArr:
                domain:
                  TVar:
                    variable: 3
                range:
                  TArr:
                    domain:
                      TVar:
                        variable: 4
                    range:
                      TVar:
                        variable: 7
    ]
-- typeAST
Module:
  declarations: [
      LetDeclaration:
        expression:
          LambdaExpression:
            argument:
              ID:
                name: a
            expression:
              LambdaExpression:
                argument:
                  ID:
                    name: b
                expression:
                  IdReference:
                    name: a
                    type:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                type:
                  TArr:
                    domain:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                    range:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
            type:
              TArr:
                domain:
                  TOr:
                    types: {
                        TCon:
                          name: String
                        TCon:
                          name: Int
                      }
                range:
                  TArr:
                    domain:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                    range:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
        name:
          ID:
            name: mplus
        schema:
          Schema:
            parameters: []
            type:
              TArr:
                domain:
                  TOr:
                    types: {
                        TCon:
                          name: String
                        TCon:
                          name: Int
                      }
                range:
                  TArr:
                    domain:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                    range:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
      LetDeclaration:
        expression:
          LambdaExpression:
            argument:
              ID:
                name: a
            expression:
              LambdaExpression:
                argument:
                  ID:
                    name: b
                expression:
                  CallExpression:
                    operand:
                      CallExpression:
                        operand:
                          IdReference:
                            name: mplus
                            type:
                              TArr:
                                domain:
                                  TOr:
                                    types: {
                                        TCon:
                                          name: String
                                        TCon:
                                          name: Int
                                      }
                                range:
                                  TArr:
                                    domain:
                                      TOr:
                                        types: {
                                            TCon:
                                              name: String
                                            TCon:
                                              name: Int
                                          }
                                    range:
                                      TOr:
                                        types: {
                                            TCon:
                                              name: String
                                            TCon:
                                              name: Int
                                          }
                        operator:
                          IdReference:
                            name: a
                            type:
                              TOr:
                                types: {
                                    TCon:
                                      name: String
                                    TCon:
                                      name: Int
                                  }
                        type:
                          TArr:
                            domain:
                              TOr:
                                types: {
                                    TCon:
                                      name: String
                                    TCon:
                                      name: Int
                                  }
                            range:
                              TOr:
                                types: {
                                    TCon:
                                      name: String
                                    TCon:
                                      name: Int
                                  }
                    operator:
                      IdReference:
                        name: b
                        type:
                          TOr:
                            types: {
                                TCon:
                                  name: String
                                TCon:
                                  name: Int
                              }
                    type:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                type:
                  TArr:
                    domain:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                    range:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
            type:
              TArr:
                domain:
                  TOr:
                    types: {
                        TCon:
                          name: String
                        TCon:
                          name: Int
                      }
                range:
                  TArr:
                    domain:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                    range:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
        name:
          ID:
            name: add
        schema:
          Schema:
            parameters: []
            type:
              TArr:
                domain:
                  TOr:
                    types: {
                        TCon:
                          name: String
                        TCon:
                          name: Int
                      }
                range:
                  TArr:
                    domain:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
                    range:
                      TOr:
                        types: {
                            TCon:
                              name: String
                            TCon:
                              name: Int
                          }
    ]