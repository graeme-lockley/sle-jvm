export suite

import file:../Test/Unit exposing Unit(..)
import file:./Option

import file:./List as List


isEven n =
  n == (Option.withDefault 1 (n / 2)) * 2


suite =
  Describe "Data.List"
  [ Describe "singleton"
    [ Test "1234" <| List.singleton 1234 == [1234]
    , Test "\"abc\"" <| List.singleton "abc" == ["abc"]
    ]
  , Describe "length"
    [ Test "[]" <| List.length [] == 0
    , Test "[1, 2, 3]" <| List.length [1, 2, 3] == 3
    ]
  , Describe "reverse"
    [ Test "[]" <| List.reverse [] == []
    , Test "[1, 2, 3, 4]" <| List.reverse [1, 2, 3, 4] == [4, 3, 2, 1]
    ]
  , Describe "map"
    [ Test "((+) 1) []" <| List.map ((+) 1) [] == []
    , Test "((+) 1) [1, 2, 3, 4]" <| List.map ((+) 1) [1, 2, 3, 4] == [2, 3, 4, 5]
    , Test "isEven [1, 2, 3, 4, 5]" <| List.map isEven [1, 2, 3, 4, 5] == [False, True, False, True, False]
    ]
  , Describe "any"
    [ Test "isEven []" <| List.any isEven [] == False
    , Test "isEven [1, 2, 3, 4, 5]" <| List.any isEven [1, 2, 3, 4, 5] == True
    , Test "isEven [1, 3, 5, 7, 9]" <| List.any isEven [1, 3, 5, 7, 9] == False
    ]
  , Describe "all"
    [ Test "isEven []" <| List.all isEven [] == True
    , Test "isEven [1, 2, 3, 4, 5]" <| List.all isEven [1, 2, 3, 4, 5] == False
    , Test "isEven [2, 4, 6, 8, 10]" <| List.all isEven [2, 4, 6, 8, 10] == True
    ]
  , Describe "filter"
    [ Test "isEven []" <| List.filter isEven [] == []
    , Test "isEven [1, 2, 3, 4, 5]" <| List.filter isEven [1, 2, 3, 4, 5] == [2, 4]
    , Test "isEven [1, 3, 5, 7, 9]" <| List.filter isEven [1, 3, 5, 7, 9] == []
    ]
  ]
