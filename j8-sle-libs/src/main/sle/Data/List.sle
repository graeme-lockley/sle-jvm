export
  all
, any
, filter
, foldLeft
, foldRight
, length
, map
, repeat
, reverse
, singleton
, sum


singleton : a -> List a
singleton element =
  [element]


foldLeft : (b -> a -> b) -> b -> List a -> b
foldLeft f z [] = z
foldLeft f z x::xs = foldLeft f (f z x) xs


foldRight : (a -> b -> b) -> b -> List a -> b
foldRight f z [] = z
foldRight f z x::xs = f x (foldRight f z xs)


reverse : List a -> List a
reverse =
  foldLeft (\xs x -> x :: xs) []


map : (a -> b) -> List a -> List b
map f [] =
  []
map f x::xs =
  (f x) :: (map f xs)


sum : List Int -> Int
sum =
  foldLeft (+) 0


length : List a -> Int
length = foldLeft (\length _ -> 1 + length) 0


repeat : a -> Int -> List a
repeat _ 0 = []
repeat e n = e :: (repeat e (n - 1))


any : (a -> Bool) -> List a -> Bool
any f =
  foldLeft (\acc v -> acc || (f v)) False


all : (a -> Bool) -> List a -> Bool
all f =
  foldLeft (\acc v -> acc && (f v)) True


filterHelper f a acc =
  if f a then
    a :: acc
  else
    acc


filter : (a -> Bool) -> List a -> List a
filter f =
  foldRight (filterHelper f) []

