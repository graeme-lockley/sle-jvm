export suite

import file:../Data//List
import file:../Data/String as S
import file:../Data/Option
import file:../Text/Regex
import file:../Test/Unit exposing Suite(..)

import file:../Debug as D


separator =
	Regex.fromString ",|\n"
		|> Option.withDefault Regex.never


parse : String -> List String
parse input =
  if S.startsWith "//[" input then
    S.index "\n" input
      |> Option.map (\i ->
            let
              s =
                S.slice 3 (i - 1) input
                  |> S.split "]["
                  |> List.map Regex.quote
                  |> S.join "|"
                  |> Regex.fromString
              		|> Option.withDefault Regex.never
              t =
                S.dropLeft (i + 1) input
            in
              Regex.split s t
          )
      |> Option.withDefault []
  else if S.startsWith "//" input then
		S.split (S.slice 2 3 input) (S.dropLeft 4 input)
	else
		Regex.split separator input


add : String -> Result (List Int) Int
add input =
  let
    numbers =
	    parse input
    		|> List.map S.toInt
    		|> List.map (Option.withDefault 0)

    isNegative n =
       n < 0

    hasNegatives =
      List.any isNegative numbers
  in
    if hasNegatives then
      numbers
        |> List.filter isNegative
        |> Error
    else
      numbers
        |> List.filter (\n -> n < 1001)
        |> List.sum
        |> Okay


suite =
  Describe "Data.StringCalculator"
  [ Describe "add"
    [ Test "\"\" == Okay 0" <| add "" == Okay 0
    , Test "\"123\" == Okay 123" <| add "123" == Okay 123
    , Test "\"1,2,3\" == Okay 6" <| add "1,2,3" == Okay 6
    , Test "\"1,1001,2,2001,3,3001\" == Okay 6" <| add "1,1001,2,2001,3,3001" == Okay 6
    , Test "\"1,2\\n3\" == Okay 6" <| add "1,2\n3" == Okay 6
    , Test "\"//;\\n1;2;3\" == Okay 6" <| add "//;\n1;2;3" == Okay 6
    , Test "\"//[===]\\n1===2===3\" == Okay 6" <| add "//[===]\n1===2===3" == Okay 6
    , Test "\"//[***]\\n1***2***3\" == Okay 6" <| add "//[***]\n1***2***3" == Okay 6
    , Test "\"//[***][--]\\n1--2***3\" == Okay 6" <| add "//[***][--]\n1--2***3" == Okay 6
    , Test "\"1,-2,3,-4\" == Error [-2, -4]" <| add "1,-2,3,-4" == Error [ -2, -4 ]
    ]
  ]
