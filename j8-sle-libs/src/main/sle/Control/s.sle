export
  main

import file:../Data/List
import file:../Data/Option
import file:../Data/String
import file:./Actor
import file:./Actor/Response

import file:../Debug as D


console =
  Actor.createBuiltin "za.co.no9.sle.runtime.actors.ConsoleActor"


mod n m =
  n - ((n / m) * m)


isDivisibleBy1000 n =
  (mod n 1000) == 0


sssActor : () -> Actor.Actor Int
sssActor () =
    Actor.filter isDivisibleBy1000
      <| Actor.map String.fromInt
      <| Actor.map (String.append "Value: ")
      <| console


incActor : Actor.Actor Int -> Int -> Actor.Actor ()
incActor next initValue =
  Actor.create
    (\self -> ((initValue, self), [ Actor.cmd self () ]))
    (\(Tuple state self) message ->
      if (mod state 100000) == 0 then
        Response.none
      else
        Response.stateMsgs
          (state + 1, self)
          [ Actor.cmd next state
          , Actor.cmd self ()
          ])


main : Int
main =
  List.repeat 1 100
    |> List.map (\n -> incActor (sssActor ()) 1)
    |> List.length
