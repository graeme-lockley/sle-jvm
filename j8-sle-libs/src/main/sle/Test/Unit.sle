export
  Unit(..)
, constant
, constantInit
, constantUpdate
, suite
, suiteInit
, suiteUpdate
, SuiteMsg(..)


import file:../Control/Actor
import file:../Control/Actor/Response

import file:../Data/Bitwise
import file:../Data/List
import file:../Data/Option
import file:../Data/String


type Unit
	= Describe String (List Unit)
	| Test String Bool


type SuiteMsg
  = TestComplete Int Unit
  | RegisterSuite (Actor.Actor SuiteMsg) Int


constantInit : Unit -> Actor.Actor SuiteMsg -> (Unit, List Actor.Cmd)
constantInit unit self =
  ( unit
  , [ ]
  )


constantUpdate : Unit -> SuiteMsg -> Actor.Response Unit
constantUpdate unit (RegisterSuite suite id) =
  Response.msg (Actor.cmd suite (TestComplete id unit))

constantUpdate unit (TestComplete id unit) =
  Response.none

constant : String -> Bool -> Actor.Actor SuiteMsg
constant name value =
  Actor.create (constantInit (Test name value)) constantUpdate


typealias SuiteState =
  { parent : Option (Actor.Actor SuiteMsg, Int)
  , name : String
  , tests : Int
  , results : List Unit
  }


suiteInit : String -> List (Actor.Actor SuiteMsg) -> Actor.Actor SuiteMsg -> (SuiteState, List Actor.Cmd)
suiteInit name tests self =
  let
    numberOfTests =
      List.length tests

    initResult : {index : Int, cmds : List Actor.Cmd}
    initResult =
      { index = numberOfTests - 1, cmds = [] }


    foldTestsFunction : Actor.Actor SuiteMsg -> { index : Int, cmds : List Actor.Cmd } -> { index : Int, cmds : List Actor.Cmd }
    foldTestsFunction test result =
      { index = result.index - 1, cmds = (Actor.cmd test (RegisterSuite self result.index)) :: result.cmds }

    cmdsResult =
      List.foldRight foldTestsFunction initResult tests
  in
    ( { parent = None
      , name = name
      , tests = numberOfTests
      , results = []
      }
    , cmdsResult.cmds
    )


suiteUpdate : SuiteState -> SuiteMsg -> Actor.Response SuiteState
suiteUpdate state (TestComplete id result) =
  let
    newState =
      { state | results = result :: state.results }

    msgs =
      if List.length newState.results == newState.tests then
        case newState.parent of
          None ->
            []

          Some (parentSuite, id) ->
            [ Actor.cmd parentSuite <| TestComplete id (Describe newState.name newState.results) ]
      else
        []
  in
    Response.stateMsgs newState msgs

suiteUpdate state (RegisterSuite parent id) =
  let
    msgs =
      if List.length state.results == state.tests then
        [ Actor.cmd parent <| TestComplete id (Describe state.name state.results) ]
      else
        []
  in
    Response.stateMsgs {state | parent = Some (parent, id) } msgs


suite name tests =
  Actor.create (suiteInit name tests) suiteUpdate
