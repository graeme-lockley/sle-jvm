export repeat, range, isEmpty, head, tail, map, removedups, duplicate, plus5, IntList


singleton x =
    x :: Nil


repeat : Int -> a -> List a
repeat n e
    | n == 0 = Nil
    | otherwise = e :: repeat (n - 1) e


range : Int -> Int -> List Int
range m n
    | m > n = Nil
    | otherwise = m :: range (m + 1) n


isEmpty Nil = True
isEmpty xs = False


head Nil = Nothing
head (Cons x xs) = Just x


tail Nil = Nothing
tail (Cons x xs) = Just xs


map : (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = f x :: map f xs


removedups : List Int -> List Int
removedups (Cons x (Cons y ys)) =
            if (x == y) then
                removedups (y :: ys)
            else
                x :: removedups (y :: ys)

removedups (Cons x xs) =
    x :: (removedups xs)

removedups Nil =
    Nil


duplicate : List a -> List a
duplicate Nil = Nil
duplicate (Cons x xs) = x :: x :: duplicate xs


plus5 n =
    n + 5


constants =
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


sum : List Int -> Int
sum Nil = 0
sum (Cons x xs) = x + (sum xs)


total =
    sum constants


typealias IntList =
    List Int
