type Maybe a =
    Nothing
  | Just a

type List a =
    Nil
  | Cons a (List a)


singleton x =
    Cons x Nil


repeat : Int -> a -> List a
repeat n e
    | n == 0 = Nil
    | otherwise = Cons e (repeat (n - 1) e)


range : Int -> Int -> List Int
range m n
    | m > n = Nil
    | otherwise = Cons m (range (m + 1) n)


isEmpty l =
    case l of
        Nil -> True
        Cons x xs -> False


head l =
    case l of
        Nil -> Nothing
        Cons x xs -> Just x


tail l =
    case l of
        Nil -> Nothing
        Cons x xs -> Just xs


map : (a -> b) -> List a -> List b
map f l =
    case l of
        Nil -> Nil
        Cons x xs -> Cons (f x) (map f xs)


removedups : List Int -> List Int
removedups l =
    case l of
        Cons x (Cons y ys) ->
            if (x == y) then
                removedups (Cons y ys)
            else
                Cons x (removedups (Cons y ys) )

        Cons x xs ->
            Cons x (removedups xs)

        Nil ->
            Nil


plus5 n =
    n + 5