export List(..), Maybe(..), repeat, range, isEmpty, head, tail, map, removedups, duplicate, IntList

type Maybe a =
    Nothing
  | Just a

type List a =
    Nil
  | Cons a (List a)


singleton x =
    Cons x Nil


repeat : Int -> a -> List a
repeat n e
    | n == 0 = Nil
    | otherwise = Cons e (repeat (n - 1) e)


range : Int -> Int -> List Int
range m n
    | m > n = Nil
    | otherwise = Cons m (range (m + 1) n)


isEmpty Nil = True
isEmpty xs = False


head Nil = Nothing
head (Cons x xs) = Just x


tail Nil = Nothing
tail (Cons x xs) = Just xs


map : (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)


removedups : List Int -> List Int
removedups (Cons x (Cons y ys)) =
            if (x == y) then
                removedups (Cons y ys)
            else
                Cons x (removedups (Cons y ys) )

removedups (Cons x xs) =
    Cons x (removedups xs)

removedups Nil =
    Nil


duplicate : List a -> List a
duplicate Nil = Nil
duplicate (Cons x xs) = Cons x (Cons x (duplicate xs))


plus5 n =
    n + 5

typealias IntList =
    List Int