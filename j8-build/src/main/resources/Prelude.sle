export
      List (..)
    , Maybe (..)

    , (<<), (>>)

    , (*), (/)

    , (+), (-)

    , (::)

    , (==), (!=), (<), (<=), (>), (>=)

    , (&&), (||)

    , (|>), (<|)


type List a
    = Nil
    | Cons a (List a)


type Maybe a
    = Nothing
    | Just a


(<< 9 right) : (b -> c) -> (a -> b) -> (a -> c)
(<< 9 right) g f x =
    g (f x)

(>> 9 right) : (a -> b) -> (b -> c) -> (a -> c)
(>> 9 right) f g x =
    g (f x)


(* 7 left) : Int -> Int -> Int
(* 7 left) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.STAR"

(/ 7 left) : Int -> Int -> Int
(/ 7 left) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.SLASH"


(+ 6 left) : Int -> Int -> Int
(+ 6 left) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.PLUS"

(- 6 left) : Int -> Int -> Int
(- 6 left) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.MINUS"


(:: 5 right) : a -> List a -> List a
(:: 5 right) =
    Cons


(== 4 none) : a -> a -> Bool
(== 4 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.EQUAL_EQUAL"

(!= 4 none) : a -> a -> Bool
(!= 4 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.BANG_EQUAL"

(< 4 none) : a -> a -> Bool
(< 4 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.LESS"

(<= 4 none) : a -> a -> Bool
(<= 4 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.LESS_EQUAL"

(> 4 none) : a -> a -> Bool
(> 4 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.GREATER"

(>= 4 none) : a -> a -> Bool
(>= 4 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.GREATER_EQUAL"


(&& 3 right) : Bool -> Bool -> Bool
(&& 3 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.AMPERSAND_AMPERSAND"


(|| 2 right) : Bool -> Bool -> Bool
(|| 2 none) =
    i_BuiltinValue "za.co.no9.sle.runtime.Builtin.BAR_BAR"


(<| 0 right) : (a -> b) -> a -> b
(<| 0 right) f x =
	f x

(|> 0 left) : a -> (a -> b) -> b
(|> 0 left) x f =
	f x

